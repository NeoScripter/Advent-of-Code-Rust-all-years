// This is not my solution
use std::collections::VecDeque;

fn sum_metadata(node: &mut VecDeque<i32>) -> i32 {
    let mut sum = 0;
    let children = node.pop_front().unwrap();
    let entries = node.pop_front().unwrap();

    for _ in 0..children {
        sum += sum_metadata(node);
    }

    for _ in 0..entries {
        sum += node.pop_front().unwrap();
    }

    sum
}
fn node_value(node: &mut VecDeque<i32>) -> i32 {
    let mut value = 0;
    let children = node.pop_front().unwrap();
    let entries = node.pop_front().unwrap();

    if children == 0 {
        // If a node has no child nodes, its value is the sum of its metadata entries.
        for _ in 0..entries {
            value += node.pop_front().unwrap();
        }
    } else {
        // if a node does have child nodes, the metadata entries become indexes which refer to those child nodes.
        let mut child_vals = Vec::new();
        for _ in 0..children {
            let val = node_value(node);
            child_vals.push(val);
        }
        for _ in 0..entries {
            let index = node.pop_front().unwrap();
            if index > 0 && index <= children {
                value += child_vals[index as usize - 1];
            }
        }
    }

    value
}
fn part1(input: &str) -> i32 {
    let mut nums: VecDeque<i32> = input.split_ascii_whitespace().map(|s| s.parse().unwrap()).collect();
    sum_metadata(&mut nums)
}
fn part2(input: &str) -> i32 {
    let mut nums: VecDeque<i32> = input.split_ascii_whitespace().map(|s| s.parse().unwrap()).collect();
    node_value(&mut nums)
}