// This is not my solution except for the parse function 

use regex::Regex;
use std::collections::HashMap;
use std::ops::Range;

#[derive(Eq, PartialEq, Ord, PartialOrd, Copy, Clone, Debug)]
struct Timestamp {
    year: u32,
    month: u32,
    day: u32,
    hour: u32,
    minute: u32,
}

#[derive(Debug)]
enum Action {
    Begin(u32),
    Awake,
    Asleep,
}

#[derive(Debug)]
struct Record {
    timestamp: Timestamp,
    action: Action,
}

#[derive(Copy, Clone)]
struct MinutesAsleep {
    total: u32,
    per_minute: [u32; 60],
}

impl Default for MinutesAsleep {
    fn default() -> Self {
        Self {
            total: 0,
            per_minute: [0; 60],
        }
    }
}

impl MinutesAsleep {
    fn add(&mut self, range: Range<u32>) {
        self.total += range.len() as u32;
        for minute in range {
            self.per_minute[minute as usize] += 1;
        }
    }

    fn most_common_minute(self) -> (u32, u32) {
        (0..60)
            .map(|m| (m, self.per_minute[m as usize]))
            .max_by_key(|&(_, x)| x)
            .unwrap()
    }
}

fn parse(input: &str) -> Vec<Record> {
    let re = Regex::new(r"\[(\d+)-(\d+)-(\d+) (\d+):(\d+)\] (Guard #(\d+) begins shift|falls asleep|wakes up)").unwrap();
    let mut records = Vec::new();

    for cap in re.captures_iter(input) {
        let year = cap[1].parse().unwrap();
        let month = cap[2].parse().unwrap();
        let day = cap[3].parse().unwrap();
        let hour = cap[4].parse().unwrap();
        let minute = cap[5].parse().unwrap();

        let timestamp = Timestamp { year, month, day, hour, minute };

        let action = match &cap[6] {
            "falls asleep" => Action::Asleep,
            "wakes up" => Action::Awake,
            _ => Action::Begin(cap[7].parse().unwrap()),
        };

        records.push(Record { timestamp, action });
    }

    records.sort_by_key(|r| r.timestamp);
    records
}


fn tally(records: &[Record]) -> HashMap<u32, MinutesAsleep> {
    let mut map = HashMap::<_, MinutesAsleep>::new();
    let mut current = 0;
    let mut asleep = 0;
    for record in records {
        let minute = record.timestamp.minute;
        match record.action {
            Action::Begin(id) => current = id,
            Action::Asleep => asleep = minute,
            Action::Awake => map.entry(current).or_default().add(asleep..minute),
        }
    }
    map
}

fn part1(records: &[Record]) -> u32 {
    let asleep = tally(records);
    let (id, minutes) = asleep
        .into_iter()
        .max_by_key(|(_, minutes)| minutes.total)
        .expect("the map can't be empty");
    id * minutes.most_common_minute().0
}

fn part2(records: &[Record]) -> u32 {
    let asleep = tally(records);
    let (id, (minute, _)) = asleep
        .into_iter()
        .map(|(id, minutes)| (id, minutes.most_common_minute()))
        .max_by_key(|(_, x)| x.1)
        .unwrap();
    id * minute
}
fn main() {
    let input = include_str!("input4.txt");
    let records = parse(&input);
    println!("{}, {}", part1(&records), part2(&records));
}